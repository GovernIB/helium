/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.caib.helium.domini.api;

import com.fasterxml.jackson.databind.JsonNode;
import es.caib.helium.domini.model.DominiDto;
import es.caib.helium.domini.model.PagedList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.Min;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-02-12T13:24:13.511Z[GMT]")
@Tag(name = "Disseny", description = "the Disseny API")
@RequestMapping("/v1/dominis")
public interface DissenyApi {

    @Operation(summary = "Crea un nou domini", description = "Adds an item to the system", tags={ "Disseny" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Domini created"),
            @ApiResponse(responseCode = "400", description = "Bad request"),

            @ApiResponse(responseCode = "409", description = "Conflicte. Ja existeix el domini") })
    @PostMapping(consumes = {"application/json"})
    ResponseEntity<Void> createDominiV1(
            @Parameter(in = ParameterIn.DEFAULT, description = "Domini a crear", required=true, schema=@Schema()) @Valid @RequestBody DominiDto dominiDto);


    @Operation(summary = "", description = "", tags={ "Disseny" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Ok"),
            @ApiResponse(responseCode = "404", description = "Not found") })
    @DeleteMapping(value = "/{dominiId}")
    ResponseEntity<Void> deleteDominiV1(@Parameter(in = ParameterIn.PATH, description = "Identificador del domini", required=true, schema=@Schema()) @PathVariable("dominiId") Long dominiId);


    @Operation(summary = "", description = "", tags={ "Disseny", "Consulta" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Ok", content = @Content(schema = @Schema(implementation = DominiDto.class))),
            @ApiResponse(responseCode = "404", description = "Not found") })
    @GetMapping(value = "/{dominiId}")
    ResponseEntity<DominiDto> getDominiV1(@Parameter(in = ParameterIn.PATH, description = "Identificador del domini", required=true, schema=@Schema()) @PathVariable("dominiId") Long dominiId);


    @Operation(summary = "Cerca de dominis", description = "Obté una página de la cerca dels **dominis** del sistema.  La cerca pot rebre paràmetres per - ordenar - paginar - filtrar (utilitzant sintaxi rsql) ", tags={ "Disseny", "Consulta" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "ok", content = @Content(schema = @Schema(implementation = PagedList.class))),
            @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @GetMapping(produces = { "application/json" })
    ResponseEntity<PagedList> listDominisV1(
            @Parameter(in = ParameterIn.QUERY, description = "cadena amb format rsql per a definir el filtre a aplicar a la consulta" ,schema=@Schema()) @Valid @RequestParam(value = "filtre", required = false) String filtre,
            @Min(0) @Parameter(in = ParameterIn.QUERY, description = "Identificador del tipus d'expedient al que pertany el domini" ,schema=@Schema()) @Valid @RequestParam(value = "expedientTipusId", required = false) Long expedientTipusId,
            @Parameter(in = ParameterIn.QUERY, description = "Identificador del tipus d'expedient pare al que pertany el domini (en cas d\\'herència)" ,schema=@Schema()) @Valid @RequestParam(value = "expedientTipusPareId", required = false) Long expedientTipusPareId,
            @Parameter(in = ParameterIn.QUERY, description = "número de pagina a retornar en cas de desitjar paginació" ,schema=@Schema(allowableValues={  }, defaultValue="0")) @Valid @RequestParam(value = "page", required = false, defaultValue="0") Integer page,
            @Min(0) @Parameter(in = ParameterIn.QUERY, description = "mida de la pàgina a retornat en cas de desitjar paginació" ,schema=@Schema(allowableValues={  }, defaultValue="25")) @Valid @RequestParam(value = "size", required = false, defaultValue="25") Integer size,
            @Parameter(in = ParameterIn.QUERY, description = "ordre a aplicar a la consulta" ,schema=@Schema()) @Valid @RequestParam(value = "sort", required = false) String sort);


    @Operation(summary = "", description = "", tags={ "Disseny" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Domini actualitzat"),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "409", description = "Conflicte") })
    @PatchMapping(value = "/{dominiId}", consumes = { "application/json" })
    ResponseEntity<Void> patchDominiV1(
            HttpServletRequest request,
            @Parameter(in = ParameterIn.PATH, description = "Identificador del domini", required=true, schema=@Schema()) @PathVariable("dominiId") Long dominiId,
            @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody JsonNode dominiJson, //Domini body);
            BindingResult bindingResult);


    @Operation(summary = "", description = "", tags={ "Disseny" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Domini actualitzat"),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "409", description = "Conflicte") })
    @PutMapping(value = "/{dominiId}", consumes = { "application/json" })
    ResponseEntity<Void> updateDominiV1(
            @Parameter(in = ParameterIn.PATH, description = "Identificador del domini", required=true, schema=@Schema()) @PathVariable("dominiId") Long dominiId,
            @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody DominiDto dominiDto);

}

